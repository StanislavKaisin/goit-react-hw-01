{"version":3,"sources":["Components/Profile/Profile.module.css","Components/PricingItem/PricingItem.module.css","Components/Stats/Stats.module.css","Components/PricingPlan/PricingPlan.module.css","Components/Profile/Profile.jsx","Components/Stats/Stats.jsx","Components/PricingItem/PricingItem.jsx","Components/PricingPlan/PricingPlan.jsx","Components/TransactionHistory/TransactionHistory.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","profile","description","avatar","name","location","stats","statsItem","label","quantity","pricingItem","icon","capacity","price","button","statsSection","title","statList","percentage","item","pricingPlan","Profile","_ref","user","tag","followers","views","likes","react_default","a","createElement","className","styles","src","alt","width","height","randomColor","r","Math","floor","random","g","b","concat","Stats","_ref$stats","map","_ref2","id","key","style","backgroundColor","PricingItem","backgroundImage","type","PricingPlan","items","arguments","length","undefined","Components_PricingItem_PricingItem","TransactionHistory","_ref$items","amount","currency","App","Components_Profile_Profile","USER1","USER2","Components_Stats_Stats","STATS","Components_PricingPlan_PricingPlan","pricingPlanItems","Components_TransactionHistory_TransactionHistory","transactions","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7deb480.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3Lmy3\",\"description\":\"Profile_description__1wOPG\",\"avatar\":\"Profile_avatar__PAPSn\",\"name\":\"Profile_name__25bhd\",\"location\":\"Profile_location__2mqU2\",\"stats\":\"Profile_stats__3ZIUl\",\"statsItem\":\"Profile_statsItem__U3ALS\",\"label\":\"Profile_label__8UimP\",\"quantity\":\"Profile_quantity__ie-2H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pricingItem\":\"PricingItem_pricingItem__3cI40\",\"icon\":\"PricingItem_icon__3wA4C\",\"label\":\"PricingItem_label__B9rAS\",\"capacity\":\"PricingItem_capacity__2pXtB\",\"description\":\"PricingItem_description__tE4ha\",\"price\":\"PricingItem_price__Gztmf\",\"button\":\"PricingItem_button__2p3pb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsSection\":\"Stats_statsSection__w31JP\",\"title\":\"Stats_title__3V2wW\",\"statList\":\"Stats_statList__2RL6f\",\"label\":\"Stats_label__z1NgA\",\"percentage\":\"Stats_percentage__1Pt81\",\"item\":\"Stats_item__3As6m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pricingPlan\":\"PricingPlan_pricingPlan__3CDzE\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Profile.module.css';\r\n\r\nconst Profile = ({ user }) => {\r\n  const { name, tag, location, avatar, stats } = user;\r\n  const { followers, views, likes } = stats;\r\n  return (\r\n    <div className={styles.profile}>\r\n      <div className={styles.description}>\r\n        <img\r\n          src={avatar}\r\n          alt=\"user avatar\"\r\n          className={styles.avatar}\r\n          width=\"128\"\r\n          height=\"128\"\r\n        />\r\n        <p className={styles.name}> {name} </p>{' '}\r\n        <p className={styles.tag}>{tag}</p>\r\n        <p className=\"location\"> {location} </p>\r\n      </div>\r\n      <ul className={styles.stats}>\r\n        <li className={styles.statsItem}>\r\n          <span className={styles.label}> Followers </span>\r\n          <span className={styles.quantity}> {followers} </span>\r\n        </li>\r\n        <li className={styles.statsItem}>\r\n          <span className={styles.label}> Views </span>\r\n          <span className={styles.quantity}> {views} </span>\r\n        </li>\r\n        <li className={styles.statsItem}>\r\n          <span className={styles.label}> Likes </span>\r\n          <span className={styles.quantity}> {likes} </span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  user: PropTypes.shape({\r\n    avatar: PropTypes.string.isRequired,\r\n    location: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    tag: PropTypes.string.isRequired,\r\n    stats: PropTypes.shape({\r\n      followers: PropTypes.number.isRequired,\r\n      views: PropTypes.number.isRequired,\r\n      likes: PropTypes.number.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Stats.module.css';\r\n\r\nconst randomColor = () => {\r\n  const r = Math.floor(Math.random() * 256);\r\n  const g = Math.floor(Math.random() * 256);\r\n  const b = Math.floor(Math.random() * 256);\r\n  return `rgb(${r}, ${g}, ${b}`;\r\n};\r\n\r\nconst Stats = ({ stats = [] }) => {\r\n  return (\r\n    <section className={styles.statsSection}>\r\n      <h2 className={styles.title}>Upload stats</h2>\r\n\r\n      <ul className={styles.statList}>\r\n        {stats.map(({ id, label, percentage }) => {\r\n          return (\r\n            <li\r\n              key={id}\r\n              className={styles.item}\r\n              style={{ backgroundColor: `${randomColor()}` }}\r\n            >\r\n              <span className={styles.label}>{label}</span>\r\n              <span className={styles.percentage}>{percentage}%</span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nStats.propTypes = {\r\n  stats: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      percentage: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default Stats;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './PricingItem.module.css';\r\n\r\nconst PricingItem = ({ capacity, description, icon, label, price }) => {\r\n  return (\r\n    <div className={styles.pricingItem}>\r\n      <i className={styles.icon} style={{ backgroundImage: `url(${icon})` }} />\r\n      <h2 className={styles.label}>{label}</h2>\r\n      <p className={styles.capacity}>{capacity} Storage</p>\r\n      <p className={styles.description}>{description}</p>\r\n      <p className={styles.price}>${price}/MO</p>\r\n      <button className={styles.button} type=\"button\">\r\n        Get Started\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nPricingItem.propTypes = {\r\n  capacity: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  price: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PricingItem;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PricingItem from '../PricingItem/PricingItem';\nimport styles from './PricingPlan.module.css';\n\nconst PricingPlan = ({ items } = []) => {\n  return (\n    <ul className={styles.pricingPlan}>\n      {items.map(item => (\n        <li key={item.label} className={styles.item}>\n          <PricingItem {...item}> </PricingItem>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPricingPlan.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({ label: PropTypes.string.isRequired }),\n  ).isRequired,\n};\n\nexport default PricingPlan;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TransactionHistory.css';\n\nconst TransactionHistory = ({ items = [] }) => {\n  return (\n    <div>\n      <table className=\"transaction-history\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Amount</th>\n            <th>Currency</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {items.map(({ id, type, amount, currency }) => (\n            <tr key={id}>\n              <td>{type}</td>\n              <td>{amount}</td>\n              <td>{currency}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React from 'react';\nimport Profile from './Components/Profile/Profile';\nimport Stats from './Components/Stats/Stats';\nimport PricingPlan from './Components/PricingPlan/PricingPlan';\nimport TransactionHistory from './Components/TransactionHistory/TransactionHistory';\n\nimport USER1 from './Sources/user1.json';\nimport USER2 from './Sources/user2.json';\nimport STATS from './Sources/stats.json';\nimport pricingPlanItems from './Sources/pricing-plan.json';\nimport transactions from './Sources/transactions.json';\n\nfunction App() {\n  return (\n    <div>\n      <h2> Profile component </h2> <Profile user={USER1}> </Profile> <br />\n      <Profile user={USER2}> </Profile> <br />\n      <h2> Stats component </h2> <Stats stats={STATS}> </Stats> <br />\n      <h2> PricingPlan component </h2>{' '}\n      <PricingPlan items={pricingPlanItems}> </PricingPlan> <br />\n      <h2> TransactionHistory component </h2>{' '}\n      <TransactionHistory items={transactions} />{' '}\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-use-before-define */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}